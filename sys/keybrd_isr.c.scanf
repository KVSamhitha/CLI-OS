#include<function.h>
extern void myprint (char*i, ...);
extern void go_to(int, int);
extern void write_char(char);
extern int scan_keybrd;
char keybrd_scan[4096];
int keybrd_offset=0;

unsigned char kbdus[128] =
{
    0,  27, '1', '2', '3', '4', '5', '6', '7', '8',	/* 9 */
  '9', '0', '-', '=', '\b',	/* Backspace */
  '\t',			/* Tab */
  'q', 'w', 'e', 'r',	/* 19 */
  't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\n',	/* Enter key */
    0,			/* 29   - Control */
  'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';',	/* 39 */
 '\'', '`',0,		/* Left shift */
 '\\', 'z', 'x', 'c', 'v', 'b', 'n',			/* 49 */
  'm', ',', '.', '/',0,				/* Right shift */
  '*',
    0,	/* Alt */
  ' ',	/* Space bar */
    0,	/* Caps lock */
    0,	/* 59 - F1 key ... > */
    0,   0,   0,   0,   0,   0,   0,   0,
    0,	/* < ... F10 */
    0,	/* 69 - Num lock*/
    0,	/* Scroll Lock */
    0,	/* Home key */
    0,	/* Up Arrow */
    0,	/* Page Up */
  '-',
    0,	/* Left Arrow */
    0,
    0,	/* Right Arrow */
  '+',
    0,	/* 79 - End key*/
    0,	/* Down Arrow */
    0,	/* Page Down */
    0,	/* Insert Key */
    0,	/* Delete Key */
    0,   0,   0,
    0,	/* F11 Key */
    0,	/* F12 Key */
    0,	/* All other keys are undefined */
};

unsigned char kbdus_num[15] = {0,0,'!','@','#','$','%','^','&','*','(',')','_','+'};  

char * keybrd_ptr=(char *)0xffffffff800b8f9c;	
static volatile int ctr,shift;


void write_keybrd_char(char chr) {
	*(keybrd_ptr)= chr;
        *(keybrd_ptr+ 1) = 0x00;
}

/* 
void keybrd_isr_output() {
	print_out("   The scanned string is %s    ",keybrd_scan);
}
*/
void keybrd_isr_handler() {

    unsigned volatile char scancode; //,kbd_buf;
    //kbd_buf='0';
    // Read from the keyboard's data buffer
    asm ("inb $0x60,%%al"
		: "=r" (scancode)
		:
    );

    // If the top bit of the byte we read from the keyboard is
    //  set, that means that a key has just been released 
    if (ctr == 0) {
	//kbd_buf='0';
    }

    if (scancode == 0x1C) {
	if(scan_keybrd == 1) {
		print_out("    scan_keybrd value was %d     ",scan_keybrd);
		scan_keybrd = 0;
		asm volatile ("" : : : "memory");
		print_out("    ENTER PRESSED and scan_keybrd is set to %d      ",scan_keybrd);
		print_out("    the entered string is %s     ",keybrd_scan);
	}
    }
    if (scancode & 0x80) {
	//write_char(kbdus[0x02]);
    }
    else
    {
	if(scancode == 0x2a) {
		shift=1;
	}

	else if (shift == 1) {
		if ((scancode > 0x0f && scancode < 0x1a) || (scancode > 29 && scancode < 39) || (scancode > 43 && scancode < 51)) {
			char uppercase = kbdus[scancode]-32;
			//write_keybrd_char(uppercase);
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]=uppercase;
				keybrd_offset++;
			}
		}	
		else if (scancode >0x01 && scancode < 0x0E) {
			//write_keybrd_char(kbdus_num[scancode]);
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]=kbdus_num[scancode];
				keybrd_offset++;
			}
		}
		else if (scancode == 0x1A) {
			//write_keybrd_char('{');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='{';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x1B) {
			//write_keybrd_char('}');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='}';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x27) {
                        //write_keybrd_char(':');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]=':';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x28) {
                        //write_keybrd_char('"');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='"';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x29) {
                        //write_keybrd_char('~');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='~';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x2B) {
                        //write_keybrd_char('|');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='|';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x33) {
                        //write_keybrd_char('<');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='<';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x34) {
                        //write_keybrd_char('>');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='>';
				keybrd_offset++;
			}
		}
		else if (scancode == 0x35) {
                        //write_keybrd_char('?');
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]='?';
				keybrd_offset++;
			}
		}
		else {
			//write_keybrd_char(kbdus[scancode]);
			if(scan_keybrd == 1) {
				keybrd_scan[keybrd_offset]=kbdus[scancode];
				keybrd_offset++;
			}
		}
		shift=0;
	}
	else {
		//write_keybrd_char(kbdus[scancode]);
		if(scan_keybrd == 1) {
			keybrd_scan[keybrd_offset]=kbdus[scancode];
			keybrd_offset++;
		}
    	}	
    }
    //kbd_buf=scancode;
    ctr++;
}
